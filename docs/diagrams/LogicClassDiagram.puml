@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class NotablyParser
Class XYZCommandParser
}

package Commons {
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class "{abstract}\nCommand" as Command
}

package Correction {
Interface CorrectionEngine <<Interface>>
class AbsolutePathCorrectionEngine
class StringCorrectionEngine
}

Interface Logic <<Interface>>
Class LogicManager
}


package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" NotablyParser
NotablyParser .left.> XYZCommandParser: creates >
NotablyParser -up- StringCorrectionEngine : corrected command <
AbsolutePathCorrectionEngine .up.|> CorrectionEngine
StringCorrectionEngine .up.|> CorrectionEngine

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser -up- AbsolutePathCorrectionEngine : corrected path <
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
LogicManager .down.> Command : executes >

LogicManager --> Model
Command .right.> Model
note right of XYZCommand: XYZCommand = List<Commands>\n(AddCommand, FindCommand, etc)

@enduml@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface CommandParser <<Interface>>
Class NotablyParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
Class AbsolutePathCorrectionEngine
}

package Command {
Class XYZCommand
Class "{abstract}\nCommand" as Command
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

AbsolutePathCorrectionEngine .up.|> CorrectionEngine
StringCorrectionEngine .up.|> CorrectionEngine
LogicManager .up.|> Logic
LogicManager -->"1" NotablyParser
NotablyParser .left.> XYZCommandParser: creates >
NotablyParser .right--> Model

XYZCommandParser .up..> XYZCommand : creates >
XYZCommandParser ..|> CommandParser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
XYZCommandParser .left -- AbsolutePathCorrectionEngine : correctedOutput <
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
LogicManager .left.> Command : executes >


LogicManager --> Model
Command .right.> Model
note left of XYZCommand: XYZCommand = List of commands\n(newCommand, DeleteCommand, \netc)

@enduml
